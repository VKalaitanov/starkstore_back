import logging
import uuid

from django.conf import settings
from django.contrib.auth.tokens import default_token_generator
from django.core.exceptions import ObjectDoesNotExist
from django.utils.http import urlsafe_base64_decode
from plisio import PlisioClient, CryptoCurrency, FiatCurrency
from rest_framework import generics, permissions
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView

from .models import CustomerUser, GlobalMessage, UserGlobalMessageStatus, BalanceHistory, BalanceTopUp
from .serializers import GlobalMessageSerializer, BalanceHistorySerializer

logger = logging.getLogger(__name__)


class ActivateUser(APIView):
    def get(self, request, uid, token):
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = urlsafe_base64_decode(uid).decode()
            user = CustomerUser.objects.get(id=user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            if default_token_generator.check_token(user, token):
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.is_active = True
                user.save()
                return Response({'detail': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.'}, status=status.HTTP_200_OK)
            else:
                return Response({'detail': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.'}, status=status.HTTP_400_BAD_REQUEST)
        except (ObjectDoesNotExist, ValueError, TypeError):
            return Response({'detail': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'}, status=status.HTTP_404_NOT_FOUND)


class GlobalMessageView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è—è, –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ –æ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        message = GlobalMessage.objects.filter(is_active=True).first()

        if message:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            user_message_status = UserGlobalMessageStatus.objects.filter(user=request.user, message=message).first()
            if user_message_status and user_message_status.is_closed:
                return Response({"detail": "Message closed by user"})

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            return Response(GlobalMessageSerializer(message).data)

        return Response({"detail": "No active global messages"})

    def post(self, request, *args, **kwargs):
        message_id = request.data.get('id')

        if not message_id:
            return Response({"detail": "Message ID is required"}, status=400)

        message = GlobalMessage.objects.filter(id=message_id, is_active=True).first()

        if message:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_message_status, created = UserGlobalMessageStatus.objects.get_or_create(
                user=request.user, message=message)

            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–æ
            user_message_status.is_closed = True
            user_message_status.save()

            return Response({"detail": "Message closed for user"})

        return Response({"detail": "Message not found or already inactive"}, status=404)


class BalanceHistoryView(generics.ListAPIView):
    serializer_class = BalanceHistorySerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return BalanceHistory.objects.filter(user=self.request.user).order_by('-create_time')


plisio_client = PlisioClient(api_key=settings.PLISIO_API_KEY)


class CreateTopUpView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {request.data}")
        user = request.user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.email:
            logger.error("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email.")
            return Response({'detail': '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email.'},
                            status=status.HTTP_400_BAD_REQUEST)

        amount = request.data.get('amount')
        try:
            amount = round(float(amount), 2) if amount else None
        except ValueError:
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return Response({'detail': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'},
                            status=status.HTTP_400_BAD_REQUEST)

        order_number = int(uuid.uuid4())
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}, Email: {user.email}")
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ Plisio –Ω–∞ —Å—É–º–º—É {amount} USD")

        if not amount or amount <= 0:
            logger.error("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return Response({'detail': '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            invoice = plisio_client.create_invoice(
                amount=amount,
                currency=CryptoCurrency.BTC,
                order_number=order_number,
                order_name='Top Up Balance',
                callback_url='https://project-pit.ru/api/v1/user/plisio-webhook/?json=true',
                email=user.email,
                source_currency=FiatCurrency.USD
            )
            logger.info(f"‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Plisio: {invoice}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –≤ Plisio: {str(e)}")
            return Response({'detail': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –≤ Plisio'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        invoice_id = invoice.txn_id
        invoice_url = invoice.invoice_url
        invoice_total_sum = invoice.invoice_total_sum

        if not invoice_id:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—á–µ—Ç–∞ –æ—Ç Plisio.")
            return Response({'detail': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        top_up = BalanceTopUp.objects.create(
            user=user,
            amount=amount,
            invoice_id=invoice_id,
            status='pending',
        )
        logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {top_up}")

        return Response({
            'id': top_up.id,
            'invoice_url': invoice_url,
            'invoice_total_sum': invoice_total_sum,
        }, status=status.HTTP_201_CREATED)


class PlisioWebhookView(APIView):
    def post(self, request, *args, **kwargs):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Plisio —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
        client = PlisioClient(api_key=settings.PLISIO_SECRET_KEY)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∏ –≤ webhook
        if not client.validate_callback(request.body):
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤ webhook.")
            return Response({'detail': '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å'}, status=status.HTTP_400_BAD_REQUEST)

        logger.info("‚úÖ –ü–æ–¥–ø–∏—Å—å webhook –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

        data = request.data
        status_payment = data.get('status')
        txn_id = data.get('txn_id')
        amount = data.get('amount')
        currency = data.get('currency')

        logger.info(f"üì® Webhook –¥–∞–Ω–Ω—ã–µ: –°—Ç–∞—Ç—É—Å - {status_payment}, TXN ID - {txn_id}, –°—É–º–º–∞ - {amount} {currency}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        if status_payment == 'paid':
            logger.info("üí∏ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            # –õ–æ–≥–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        elif status_payment == 'cancelled':
            logger.warning("‚ùå –ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            logger.info("‚è≥ –ü–ª–∞—Ç—ë–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.")

        return Response({'detail': 'Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}, status=status.HTTP_200_OK)


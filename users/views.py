import json
import logging
import uuid

from django.conf import settings
from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.contrib.auth.tokens import default_token_generator
from django.core.exceptions import ObjectDoesNotExist
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.encoding import force_bytes, force_str
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from plisio import PlisioClient, CryptoCurrency, FiatCurrency
from rest_framework import generics, permissions
from rest_framework import status
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.response import Response
from rest_framework.views import APIView

from .models import CustomerUser, InfoMessage
from .models import GlobalMessage, UserGlobalMessageStatus, BalanceHistory, BalanceTopUp
from .serializers import GlobalMessageSerializer, BalanceHistorySerializer, ResetPasswordSerializer, \
    InfoMessageSerializer

logger = logging.getLogger(__name__)


class RequestPasswordResetView(APIView):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è """
    permission_classes = [AllowAny]

    def post(self, request):
        email = request.data.get('email')
        try:
            user = CustomerUser.objects.get(email=email)
            token_generator = PasswordResetTokenGenerator()
            token = token_generator.make_token(user)
            uid = urlsafe_base64_encode(force_bytes(user.pk))

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—à–∞–±–ª–æ–Ω
            subject = "Password Reset Request"
            message = render_to_string('email/password_reset_email.html', {
                'domain': settings.FRONTEND_URL,
                'uid': uid,
                'token': token,
                'site_name': 'STARKSTORE',
            })
            # –û—Ç–ø—Ä–∞–≤–∫–∞ email
            send_mail(subject, '', settings.DEFAULT_FROM_EMAIL, [email], html_message=message)

            return Response({'detail': 'Password reset email sent.'}, status=status.HTTP_200_OK)
        except CustomerUser.DoesNotExist:
            return Response({'detail': 'User with this email does not exist.'}, status=status.HTTP_404_NOT_FOUND)


class ResetPasswordView(APIView):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""
    permission_classes = [AllowAny]

    def post(self, request, uid, token):
        serializer = ResetPasswordSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        try:
            user_id = force_str(urlsafe_base64_decode(uid))
            user = CustomerUser.objects.get(pk=user_id)
            token_generator = PasswordResetTokenGenerator()

            if token_generator.check_token(user, token):
                user.set_password(serializer.validated_data['new_password'])
                user.save()
                return Response({'detail': 'Password reset successful.'}, status=status.HTTP_200_OK)
            else:
                return Response({'detail': 'Invalid token or expired link.'}, status=status.HTTP_400_BAD_REQUEST)
        except (CustomerUser.DoesNotExist, ValueError, TypeError):
            return Response({'detail': 'Invalid token or user not found.'}, status=status.HTTP_404_NOT_FOUND)


class ActivateUser(APIView):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    permission_classes = [AllowAny]

    def get(self, request, uid, token):
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = urlsafe_base64_decode(uid).decode()
            user = CustomerUser.objects.get(id=user_id)

            if user.pending_email:
                user.email = user.pending_email
                user.pending_email = ''
                user.save()
                return Response({'detail': 'You have successfully changed Email.'}, status=status.HTTP_200_OK)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            if default_token_generator.check_token(user, token):
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.is_active = True
                user.save()
                return Response({'detail': 'The account has been successfully activated.'}, status=status.HTTP_200_OK)
            else:
                return Response({'detail': 'Invalid token.'}, status=status.HTTP_400_BAD_REQUEST)
        except (ObjectDoesNotExist, ValueError, TypeError):
            return Response({'detail': 'User not found.'}, status=status.HTTP_404_NOT_FOUND)


class GlobalMessageView(APIView):

    def get(self, request, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã–ª
        messages = GlobalMessage.objects.filter(is_active=True).exclude(
            id__in=UserGlobalMessageStatus.objects.filter(
                user=request.user,
                is_closed=True
            ).values_list(
                'message_id',
                flat=True
            )
        ).order_by('-created_at')  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if messages.exists():
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return Response(GlobalMessageSerializer(messages.first()).data)

        return Response({"detail": "No active global messages"})

    def post(self, request, *args, **kwargs):
        message_id = request.data.get('id')

        if not message_id:
            return Response({"detail": "Message ID is required"}, status=400)

        message = GlobalMessage.objects.filter(id=message_id, is_active=True).first()

        if message:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_message_status, created = UserGlobalMessageStatus.objects.get_or_create(
                user=request.user, message=message)

            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–æ
            user_message_status.is_closed = True
            user_message_status.save()

            return Response({"detail": "Message closed for user"})

        return Response({"detail": "Message not found or already inactive"}, status=404)


class InfoMessageView(APIView):

    def get(self, request):
        message = InfoMessage.objects.last()  # –í–æ–∑—å–º–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not message:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç
            return Response({"detail": "No messages found."}, status=404)
        serializer = InfoMessageSerializer(message)
        return Response(serializer.data)


class BalanceHistoryView(generics.ListAPIView):
    serializer_class = BalanceHistorySerializer

    def get_queryset(self):
        return BalanceHistory.objects.filter(user=self.request.user).order_by('-create_time')


plisio_client = PlisioClient(api_key=settings.PLISIO_API_KEY)


class CreateTopUpView(APIView):

    def post(self, request):
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {request.data}")
        user = request.user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.email:
            logger.error("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email.")
            return Response({'detail': '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email.'},
                            status=status.HTTP_400_BAD_REQUEST)

        amount = request.data.get('amount')
        try:
            amount = round(float(amount), 2) if amount else None
        except ValueError:
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return Response({'detail': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'},
                            status=status.HTTP_400_BAD_REQUEST)

        order_number = int(uuid.uuid4())
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}, Email: {user.email}")
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ Plisio –Ω–∞ —Å—É–º–º—É {amount} USD")

        if not amount or amount <= 0:
            logger.error("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return Response({'detail': '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            invoice = plisio_client.create_invoice(
                amount=amount,
                currency=CryptoCurrency.USDT_TRX,
                order_number=order_number,
                order_name='Top Up Balance',
                callback_url='https://project-pit.ru/api/v1/user/plisio-webhook/?json=true',
                email=user.email,
                source_currency=FiatCurrency.USD
            )
            logger.info(f"‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Plisio: {invoice}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –≤ Plisio: {str(e)}")
            return Response({'detail': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –≤ Plisio'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        invoice_id = invoice.txn_id
        invoice_url = invoice.invoice_url
        invoice_total_sum = invoice.invoice_total_sum

        if not invoice_id:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—á–µ—Ç–∞ –æ—Ç Plisio.")
            return Response({'detail': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        top_up = BalanceTopUp.objects.create(
            user=user,
            amount=amount,
            invoice_id=invoice_id,
            status='pending',
        )
        logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {top_up}")

        return Response({
            'id': top_up.id,
            'invoice_url': invoice_url,
            'invoice_total_sum': invoice_total_sum,
        }, status=status.HTTP_201_CREATED)


class PlisioWebhookView(APIView):
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        # client = PlisioClient(api_key=settings.PLISIO_API_KEY)

        if not request.body:
            logger.error("‚ùå –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ webhook.")
            return Response({'detail': '–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞'}, status=status.HTTP_400_BAD_REQUEST)

        if request.content_type != 'application/json':
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Content-Type: {request.content_type}")
            return Response({'detail': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}, status=status.HTTP_400_BAD_REQUEST)

        if not plisio_client.validate_callback(json.dumps(request.data)):
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤ webhook.")
            return Response({'detail': '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å'}, status=status.HTTP_400_BAD_REQUEST)

        logger.info("‚úÖ –ü–æ–¥–ø–∏—Å—å webhook –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

        data = request.data
        status_payment = data.get('status')
        txn_id = data.get('txn_id')
        amount = data.get('amount')
        currency = data.get('currency')

        logger.info(f"üì® Webhook –¥–∞–Ω–Ω—ã–µ: –°—Ç–∞—Ç—É—Å - {status_payment}, TXN ID - {txn_id}, –°—É–º–º–∞ - {amount} {currency}")
        try:
            top_up = BalanceTopUp.objects.get(invoice_id=txn_id)
        except BalanceTopUp.DoesNotExist:
            logger.error(f"‚ùå –°—á–µ—Ç —Å ID {txn_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return Response({'detail': '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)

        if status_payment == 'completed':
            top_up.status = 'paid'
            top_up.save()
            user = top_up.user
            old_balance = user.balance
            user.balance += top_up.amount
            user.save(admin_transaction=False)
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {top_up.amount}")
            BalanceHistory.objects.create(
                user=user,
                old_balance=old_balance,
                new_balance=user.balance,
                transaction_type=BalanceHistory.TransactionType.DEPOSIT.value
            )
            logger.info("üí∏ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        elif status_payment == 'cancelled':
            top_up.status = 'failed'
            top_up.save()
            logger.warning("‚ùå –ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")
        elif status_payment == 'expired':
            top_up.status = 'expired'
            top_up.save()
            logger.warning("‚ùå –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞.")
        else:
            top_up.status = 'pending'
            top_up.save()
            logger.info("‚è≥ –ü–ª–∞—Ç—ë–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.")

        return Response({'detail': 'Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}, status=status.HTTP_200_OK)

import hashlib
import hmac
import json
import uuid

import requests
from django.conf import settings
from django.contrib.auth.tokens import default_token_generator
from django.core.exceptions import ObjectDoesNotExist
from django.utils.http import urlsafe_base64_decode
from rest_framework import generics, permissions
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView

from .models import CustomerUser, GlobalMessage, UserGlobalMessageStatus, BalanceHistory, BalanceTopUp
from .serializers import GlobalMessageSerializer, BalanceHistorySerializer


class ActivateUser(APIView):
    def get(self, request, uid, token):
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = urlsafe_base64_decode(uid).decode()
            user = CustomerUser.objects.get(id=user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            if default_token_generator.check_token(user, token):
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.is_active = True
                user.save()
                return Response({'detail': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.'}, status=status.HTTP_200_OK)
            else:
                return Response({'detail': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.'}, status=status.HTTP_400_BAD_REQUEST)
        except (ObjectDoesNotExist, ValueError, TypeError):
            return Response({'detail': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'}, status=status.HTTP_404_NOT_FOUND)


class GlobalMessageView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è—è, –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ –æ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        message = GlobalMessage.objects.filter(is_active=True).first()

        if message:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            user_message_status = UserGlobalMessageStatus.objects.filter(user=request.user, message=message).first()
            if user_message_status and user_message_status.is_closed:
                return Response({"detail": "Message closed by user"})

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            return Response(GlobalMessageSerializer(message).data)

        return Response({"detail": "No active global messages"})

    def post(self, request, *args, **kwargs):
        message_id = request.data.get('id')

        if not message_id:
            return Response({"detail": "Message ID is required"}, status=400)

        message = GlobalMessage.objects.filter(id=message_id, is_active=True).first()

        if message:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_message_status, created = UserGlobalMessageStatus.objects.get_or_create(
                user=request.user, message=message)

            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–æ
            user_message_status.is_closed = True
            user_message_status.save()

            return Response({"detail": "Message closed for user"})

        return Response({"detail": "Message not found or already inactive"}, status=404)


class BalanceHistoryView(generics.ListAPIView):
    serializer_class = BalanceHistorySerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return BalanceHistory.objects.filter(user=self.request.user).order_by('-create_time')


import logging

logger = logging.getLogger(__name__)


class CreateTopUpView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        logger.error(f"Request data: {request.data}")
        user = request.user
        amount = request.data.get('amount')
        amount = round(float(amount), 2) if amount else None
        order_number = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞

        if not amount or float(amount) <= 0:
            return Response({'detail': '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'}, status=status.HTTP_400_BAD_REQUEST)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'source_currency': 'USD',  # –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞
            'source_amount': amount,
            'order_number': order_number,
            'currency': 'BTC',  # –í–∞–ª—é—Ç–∞ –æ–ø–ª–∞—Ç—ã
            'email': user.email,
            'order_name': 'Top Up Balance',
            'callback_url': 'https://project-pit.ru/api/v1/user/plisio-webhook/',
            'api_key': settings.PLISIO_API_KEY,
        }

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ Plisio API
            response = requests.get(
                'https://api.plisio.net/api/v1/invoices/new',
                params=params
            )
            response.raise_for_status()  # –ë—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 2xx
        except requests.RequestException as e:
            logger.error(f"Plisio request failed: {str(e)}")
            return Response({'detail': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –≤ Plisio'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        response_data = response.json()
        if response_data.get('status') != 'success':
            logger.error(f"Plisio response: {response_data}")
            return Response({'detail': response_data.get('message', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞')},
                            status=status.HTTP_400_BAD_REQUEST)

        invoice_data = response_data['data']
        invoice_id = invoice_data.get('txn_id')  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç Plisio

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        top_up = BalanceTopUp.objects.create(
            user=user,
            amount=amount,
            invoice_id=invoice_id,
            status='pending',
        )

        return Response({
            'id': top_up.id,
            'invoice_url': invoice_data.get('invoice_url'),
            'invoice_total_sum': invoice_data.get('invoice_total_sum'),
        }, status=status.HTTP_201_CREATED)


class PlisioWebhookView(APIView):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Plisio"""

    def post(self, request):
        logger.info("=== –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Plisio ===")
        logger.info(f"Webhook data: {request.data}")
        logger.info(f"Webhook headers: {request.headers}")

        data = request.data
        signature = request.headers.get('Signature')  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Signature

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Signature
        if not signature:
            logger.warning("üö® –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Signature")
            return Response({'detail': 'Missing signature header'}, status=status.HTTP_400_BAD_REQUEST)

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ–º–æ–π –ø–æ–¥–ø–∏—Å–∏
        try:
            expected_signature = hmac.new(
                settings.PLISIO_API_KEY.encode(),
                msg=json.dumps(data, sort_keys=True).encode(),
                digestmod=hashlib.sha256,
            ).hexdigest()
            logger.info(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å: {expected_signature}")
            logger.info(f"üì® –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {signature}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {str(e)}")
            return Response({'detail': f'Error generating signature: {str(e)}'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
        if not hmac.compare_digest(signature, expected_signature):
            logger.warning("üö® –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
            return Response({'detail': 'Invalid signature'}, status=status.HTTP_403_FORBIDDEN)
        logger.info("‚úÖ –ü–æ–¥–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ invoice_id
        invoice_id = data.get('id')
        status_value = data.get('status')

        if not invoice_id:
            logger.warning("üö® –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç invoice_id –≤ –¥–∞–Ω–Ω—ã—Ö")
            return Response({'detail': 'Invoice ID is missing'}, status=status.HTTP_400_BAD_REQUEST)

        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω invoice_id: {invoice_id}")
        logger.info(f"üì¶ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status_value}")

        # 5. –ü–æ–∏—Å–∫ —Å—á—ë—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            top_up = BalanceTopUp.objects.get(invoice_id=invoice_id)
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–ø-–∞–ø: {top_up}")
        except BalanceTopUp.DoesNotExist:
            logger.error(f"‚ùå –°—á–µ—Ç —Å ID {invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return Response({'detail': '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)

        # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        if status_value == 'completed':
            if top_up.status != 'paid':  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                top_up.status = 'paid'
                top_up.save()
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'paid' –¥–ª—è invoice_id: {invoice_id}")

                # 7. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = top_up.user
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} | –ë–∞–ª–∞–Ω—Å –¥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {user.balance}")
                user.balance += top_up.amount
                user.save()
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {top_up.amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}")
            else:
                logger.warning(f"‚ö†Ô∏è –°—á–µ—Ç {invoice_id} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        elif status_value == 'failed':
            top_up.status = 'failed'
            top_up.save()
            logger.info(f"‚ùå –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'failed' –¥–ª—è invoice_id: {invoice_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status_value}")

        logger.info("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
        return Response({'detail': 'success'})


